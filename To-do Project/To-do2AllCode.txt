>>>>>>>>>> Todo App <<<<<<<<<<<<<

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
1) Sign Up Page
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">

<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
<h1 class="display-6 text-center">SignUp</h1>
<a class="btn btn-danger" href="login.jsp">Login</a>

<!-- msg  The code includes an external file named “msg.jsp” using the <%@ include file="msg.jsp" %> directive. This allows reusing common content across multiple pages. -->

<%@ include file="msg.jsp" %>

<div class="container w-75">
<form action="signup">

<label class="form-label">Enter UserName</label>
<input type="text" name="uname" class="form-control">

<label class="form-label">Enter Password</label>
<input type="password" name="upass" class="form-control">

<label class="form-label">Enter Email</label>
<input type="email" name="uemail" class="form-control">

<label class="form-label">Enter DOB</label>
<input type="date" name="udob" class="form-control">

<button class="btn btn-success mt-4">SignUp</button>
</form>
</div>
</body>
</html>

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
2)SignUp Servlet
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
package com.MainApp;

import java.io.IOException;
import java.security.Provider.Service;
import java.sql.Connection;
import java.util.ArrayList;

import com.ConnectionFactory.ConnectionFactory;
import com.Dao.userDao;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
@WebServlet("/signUp")
public class signUp extends HttpServlet {


	@Override
	protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
			
		String name = req.getParameter("uname");
		String password = req.getParameter("upass");
		String email = req.getParameter("umail");

		Connection con =ConnectionFactory.getCon();
		userDao udao = new userDao();
		 
		HttpSession s = req.getSession();
		
		
		String res=udao.signUp( name, password, email,con);


		if(res.equals("added"))
		{
			s.setAttribute("msg","Account Created Successfully");
			resp.sendRedirect("login.jsp");
		}
		else
		{
			s.setAttribute("msg","Failed");
			resp.sendRedirect("signUp.html");
		}
	}
	}

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Explanation:- 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

Certainly! Let's break down the provided Java servlet code step by step:

1. **Servlet Class Definition**:
   - The class `signUp` extends `HttpServlet`, which means it's a servlet that handles HTTP requests.
   - It's annotated with `@WebServlet("/signUp")`, indicating that this servlet will handle requests with the URL path "/signUp".

2. **Service Method**:
   - The `service` method is overridden from the `HttpServlet` class.
   - This method is called by the servlet container (e.g., Tomcat) to process incoming HTTP requests.
   - It takes two parameters: `HttpServletRequest req` (representing the incoming request) and `HttpServletResponse resp` (representing the response to be sent back to the client).

3. **Request Parameters**:
   - The code retrieves three parameters from the request:
     - `name`: The user's name.
     - `password`: The user's password.
     - `email`: The user's email address.

4. **Database Connection and DAO**:
   - It establishes a database connection using `ConnectionFactory.getCon()`.
   - The `userDao` instance (`udao`) is created. Presumably, this is a data access object responsible for interacting with the database.

5. **Session Handling**:
   - A session (`HttpSession`) is obtained from the request using `req.getSession()`.
   - Sessions allow maintaining state across multiple requests for the same user.

6. **User Registration Logic**:
   - The `udao.signUp(name, password, email, con)` method is called. This method likely inserts the user's registration data (name, password, email) into the database.
   - If the result is "added," it sets a success message in the session attribute and redirects the user to the login page (`login.jsp`).
   - Otherwise (if the result is not "added"), it sets a failure message and redirects the user back to the signup page (`signUp.html`).

7. **Overall Flow**:
   - When a user submits the signup form, this servlet processes the data, interacts with the database, and provides appropriate feedback to the user.


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
3)Login Page:- 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
<link rel="stylesheet" href="login.css">
<title>login Page</title>
</head>
<body>

<div class="container">
    <div class="row">
      <div class="col-md-6 offset-md-3">
        <h2 class="text-center text-dark mt-5">Login Form</h2>
        <div class="text-center mb-5 text-dark">Made with bootstrap</div>
        <div class="card my-5">

<%@ include  file="msg.jsp" %>
          <form class="card-body cardbody-color p-lg-5"  action="login">

            <div class="text-center">
              <img src="https://cdn.pixabay.com/photo/2016/03/31/19/56/avatar-1295397__340.png" class="img-fluid profile-image-pic img-thumbnail rounded-circle my-3"
                width="200px" alt="profile">
            </div>

            <div class="mb-3">
              <input type="text" class="form-control" id="Username" name="Username" aria-describedby="emailHelp"
                placeholder="User Name">
            </div>
            <div class="mb-3">
              <input type="password" class="form-control" id="password" name="password" placeholder="password">
            </div>
            <div class="text-center"><button type="submit" class="btn btn-color px-5 mb-5 w-100">Login</button></div>
          </form>
        </div>

      </div>
    </div>
  </div>

</body>
</html>

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
4) Login Servet Page:- 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

package com.MainApp;

import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.util.ArrayList;

import com.ConnectionFactory.ConnectionFactory;
import com.Dao.userDao;
import com.Entity.*;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
@WebServlet("/login")
public class login extends HttpServlet {

	@Override
	protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		
		String name= req.getParameter("Username");
		String password= req.getParameter("password");
		
		System.out.println(name+password);
		
		Connection con = ConnectionFactory.getCon();
		userDao iDao = new userDao();
		
		HttpSession s = req.getSession();
		ArrayList<UserData> al=iDao.getNotes(name, con);

		String res = iDao.loginUser(name, password,con);
		if(res.equals("exists"))
		{
			String url ="home.jsp?check="+name;
			s.setAttribute("check", name);
			s.setAttribute("notes", al);
			resp.sendRedirect(url);
		}
		else
		{
			s.setAttribute("msg","Failed");
			resp.sendRedirect("login.jsp");
		}
	
	}
}

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Explanation :- 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

Certainly! Let's dive into the provided Java servlet code for the "login" functionality. I'll break it down step by step:

1. **Servlet Class Definition**:
   - The class `login` extends `HttpServlet`, indicating that it's a servlet handling HTTP requests.
   - It's annotated with `@WebServlet("/login")`, which means this servlet will handle requests with the URL path "/login".

2. **Service Method**:
   - The `service` method is overridden from the `HttpServlet` class.
   - This method is automatically called by the servlet container (such as Tomcat) to process incoming HTTP requests.
   - It takes two parameters:
     - `HttpServletRequest req`: Represents the incoming request (e.g., form data, query parameters).
     - `HttpServletResponse resp`: Represents the response to be sent back to the client.

3. **Request Parameters**:
   - The code retrieves two parameters from the request:
     - `name`: The user's entered username (presumably from a login form).
     - `password`: The user's entered password.

4. **Database Connection and DAO**:
   - It establishes a database connection using `ConnectionFactory.getCon()`.
   - An instance of the `userDao` class (`iDao`) is created. This class likely handles database operations related to user data.

5. **Session Handling**:
   - A session (`HttpSession`) is obtained from the request using `req.getSession()`.
   - Sessions allow maintaining state across multiple requests for the same user.

6. **User Authentication Logic**:
   - The `iDao.loginUser(name, password, con)` method is called. This method likely checks whether the provided username and password match any existing user records in the database.
   - If the result is "exists," it means successful authentication:
     - The user's name is stored in the session attribute "check."
     - An `ArrayList<UserData>` (`al`) is retrieved (possibly containing user-specific data).
     - The user is redirected to the "home.jsp" page with the username as a query parameter.
   - Otherwise (if the result is not "exists"), it sets a failure message in the session attribute and redirects the user back to the login page (`login.jsp`).

7. **Overall Flow**:
   - When a user submits the login form, this servlet processes the data, checks the credentials against the database, and provides appropriate feedback to the user.

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
4) Logout Servlet Page:-
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

package com.MainApp;

import java.io.IOException;
import java.sql.Connection;


import com.ConnectionFactory.ConnectionFactory;
import com.Dao.userDao;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
@WebServlet("/logout")
public class Launch3 extends HttpServlet {
	
	@Override
	protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		
		
		HttpSession s = req.getSession();
		s.removeAttribute("check");
		s.removeAttribute("msg");
		resp.sendRedirect("login.jsp");
		
	}

}

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
5) Error Message.jsp Page:-
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    
    
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>

<%
String msg=(String)session.getAttribute("msg");
if(msg!=null)
{
	

%>
<h1 class="display-6 text-danger"><%=msg %></h1>
<%} 
else
{
	session.removeAttribute("msg");
}
%>
</body>
</html>

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Explanation :- 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

Certainly! Let's break down the provided Java Server Pages (JSP) code snippet:

1. **JSP Page Structure**:
   - The code represents a JSP page (a dynamic web page) that will be processed by the server before being sent to the client's browser.
   - JSP pages allow embedding Java code within HTML content.

2. **Character Encoding and Title**:
   - The page specifies the character encoding as "ISO-8859-1" using the `<%@ page %>` directive.
   - The title of the page is set to "Insert title here."

3. **Conditional Message Display**:
   - The code checks whether a session attribute named "msg" exists (`String msg = (String) session.getAttribute("msg");`).
   - If the attribute exists (i.e., `msg` is not null), it displays a message using the `<h1>` tag with the class "display-6" and a red text color (Bootstrap class "text-danger").
   - The message content is dynamically retrieved from the session attribute: `<%= msg %>`.
   - If the attribute does not exist (i.e., `msg` is null), it removes the attribute from the session (using `session.removeAttribute("msg")`).

4. **Bootstrap Styling**:
   - The code includes a link to the Bootstrap CSS file (`bootstrap.min.css`) from a CDN (Content Delivery Network). This allows styling the page elements using Bootstrap classes.

5. **Overall Flow**:
   - When this JSP page is accessed, it checks whether there's a message stored in the session (e.g., a success message after signup or a failure message after login).
   - If there's a message, it displays it prominently on the page.
   - If there's no message, it ensures that any previous "msg" attribute is removed from the session.

Remember that this JSP snippet is typically used in conjunction with other JSP pages (such as login forms, signup forms, or home pages). The actual logic for setting the "msg" attribute in the session would be handled elsewhere (e.g., in servlets or controllers).

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
6) addnote.jsp page
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html>
<head>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">

<meta charset="ISO-8859-1">
<title>Insert title here</title>
<style type="text/css">
.popup{
display: none;
position: fixed;
z-index: 1;
left: 0px;
right: 0px;
top:100px;
width: 100%;
height: 100%;
}

.popup-content{
margin: 20px auto;
width: 50%;
background-color: #EAECEE ;
}

.close{
float: right;
font-size: 35px;
}
</style>

</head>
<body>

<%
String check1=(String)session.getAttribute("check");
if(check1!=null)
{
	
%>
<button class="btn btn-info" onclick="openform()">Add</button>

<div class="popup" id="popupform">
<div class="popup-content">

<h1 class="display-6 text-center" >Add Note</h1>
<span class="close text-white btn btn-outline-danger" onclick="closeform()">&times;</span>

<form action="addnote" method="post">
<input type="hidden" name="uname" value="<%=check1%>">
<label class="form-label">Write Note</label>
<textarea rows="10" cols="30" name="note" class="form-control"></textarea>
<button class="btn btn-info">Submit</button>
</form>

</div>
</div>

<%} 
else
{
	response.sendRedirect("login.html");
}
%>

<script type="text/javascript">

function openform()
{
	document.getElementById("popupform").style.display="Block";
}
function closeform()
{
	document.getElementById("popupform").style.display="none";
}
</script>
</body>
</html>
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Explanation  :- 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

Certainly! Let's break down the provided JSP (JavaServer Pages) code snippet step by step:

1. **JSP Page Structure**:
   - The code represents a JSP page that will be processed by the server and sent to the client's browser.
   - JSP allows embedding Java code within HTML content.

2. **Character Encoding and Title**:
   - The page specifies the character encoding as "ISO-8859-1" using the `<%@ page %>` directive.
   - The title of the page is set to "Insert title here."

3. **Bootstrap Styling**:
   - The code includes a link to the Bootstrap CSS file (`bootstrap.min.css`) from a CDN (Content Delivery Network). This allows styling the page elements using Bootstrap classes.

4. **Popup Form Logic**:
   - If a session attribute named "check" exists (i.e., the user is logged in), the following elements are displayed:
     - A button with the label "Add." When clicked, it triggers the display of a popup form.
     - The popup form is initially hidden (`display: none;`) and becomes visible when the button is clicked.
     - The form includes:
       - A heading ("Add Note") centered using Bootstrap classes.
       - A close button (an "X" symbol) that hides the popup form when clicked.
       - A textarea input for writing a note.
       - A hidden input field (`<input type="hidden">`) containing the username (`uname`).
       - A submit button labeled "Submit."
   - If the session attribute does not exist (i.e., the user is not logged in), the user is redirected to the login page (`login.html`).

5. **JavaScript Functions**:
   - Two JavaScript functions are defined:
     - `openform()`: Displays the popup form by setting its style to `display: block;`.
     - `closeform()`: Hides the popup form by setting its style to `display: none;`.

6. **Overall Flow**:
   - When a user is logged in, they see an "Add" button.
   - Clicking the button reveals a popup form where the user can write and submit a note.
   - If the user is not logged in, they are redirected to the login page.


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
7) Addnote Servlet page :- 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


package com.MainApp;

import java.io.IOException;
import java.sql.Connection;
import java.util.ArrayList;


import com.ConnectionFactory.ConnectionFactory;
import com.Dao.userDao;
import com.Entity.UserData;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
@WebServlet("/addnote")
public class Launch4 extends HttpServlet {
	
	@Override
	protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		
		
		String note = req.getParameter("note");
		String name = req.getParameter("uname");
		
		
		Connection con = ConnectionFactory.getCon();
		userDao uDao = new userDao();
		
		uDao.addNote(name, note, con);
		
		
		ArrayList<UserData> al = uDao.getNotes(name, con);
		HttpSession s = req.getSession();
		
		s.setAttribute("notes", al);
		resp.sendRedirect("home.jsp");
		
	}

}

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Explanation :- 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

Certainly! Let's dive into the provided JSP code for the home page of a "To Do Application." I'll break it down step by step:

1. **JSP Page Structure**:
   - The code represents a JSP page that will be processed by the server and sent to the client's browser.
   - JSP allows embedding Java code within HTML content.

2. **Character Encoding and Title**:
   - The page specifies the character encoding as "ISO-8859-1" using the `<%@ page %>` directive.
   - The title of the page is set to "Home Page."

3. **Bootstrap Styling and JavaScript**:
   - The code includes a link to the Bootstrap CSS file (`bootstrap.min.css`) from a CDN (Content Delivery Network). This allows styling the page elements using Bootstrap classes.
   - It also includes a reference to an external JavaScript file named "SerialNumberS.js."

4. **Conditional Content Display**:
   - If a session attribute named "check" exists (i.e., the user is logged in), the following elements are displayed:
     - A welcome message with the user's name.
     - A logout button.
     - An "Add Note" button that links to the "addnote.jsp" page.
     - A section for displaying existing notes (if any).
   - If the user is not logged in, they are redirected to the login page (`login.jsp`).

5. **Displaying Existing Notes**:
   - If the `al` (ArrayList of `UserData`) attribute exists in the session, it iterates through each note and displays them:
     - Note content.
     - Add date.
     - Last update date.
     - A delete button (to remove the note).
     - An update form (presumably for editing the note).
   - If no notes exist, a message is displayed prompting the user to add notes.

6. **Overall Flow**:
   - When a user is logged in, they see their welcome message, an "Add Note" button, and any existing notes.
   - The user can add, edit, or delete notes.
   - If the user is not logged in, they are redirected to the login page.

Remember that this JSP snippet is typically part of a larger web application. The actual logic for handling note creation, deletion, and updates would be implemented elsewhere (such as in servlets or controllers).

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Entity Class :- 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
package com.Entity;

public class UserData {

	String note;
	String addDate;
	String mDate;
	public String getNote() {
		return note;
	}
	public void setNote(String note) {
		this.note = note;
	}
	public String getAddDate() {
		return addDate;
	}
	public void setAddDate(String addDate) {
		this.addDate = addDate;
	}
	public String getmDate() {
		return mDate;
	}
	public void setmDate(String mDate) {
		this.mDate = mDate;
	}
	
}

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Entity Class:- 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

package com.Entity;

public class User {
	
	String name;
	String password;
	
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getPassword() {
		return password;
	}
	public void setPassword(String password) {
		this.password = password;
	}
	
	
}

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Dao Class  :- 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


package com.Dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.time.LocalDate;
import java.util.ArrayList;

import com.Entity.*;

public class userDao {
	
	String result="";

	public String signUp(String name, String password, String email, Connection con)
	{
		try
		{
			String sql = "insert into userdata values(?,?,?)";
			PreparedStatement ps = con.prepareStatement(sql);
			ps.setString(1, name);
			ps.setString(2, password);
			ps.setString(3, email);
			
			int row = ps.executeUpdate();
			if(row==1)
			{
				result="added";
				
				String sql1 = "Create table "+name+"Data(note varchar(255),AddDate varchar(255),MDate varchar(10))";
				con.prepareStatement(sql1).execute();

			}
			else
			{
				result="failed";
			}
		}
			catch (Exception e) 
		    {
				result="failed";
				System.out.println(e);
			}
			finally 
			{	
				return result;
			}
	}
	
	public String loginUser(String name, String password, Connection con)
	{
		try
		{
			String sql="select * from userdata where name=? and password=?";
			
			PreparedStatement ps = con.prepareStatement(sql);
			
			ps.setString(1, name);
			ps.setString(2, password);
			
			ResultSet rs = ps.executeQuery();
			int count=0;
			while(rs.next())
			{
				count++;
			}
			if(count==1)
			{
				result="exists";
			}
			else
			{
				result="not exists";
			}
			
		}
		catch (Exception e) {
			System.out.println(e);
		}
		finally {
			return result;
		}
			
		}
		
	public String addDetails(int id, String name, int fees, Connection con)
	{
		try
		{
			String sql = "insert into info values(?,?,?)";
			PreparedStatement ps = con.prepareStatement(sql);
			ps.setInt(1, id);
			ps.setString(2, name);
			ps.setInt(3, fees);
			
			int row = ps.executeUpdate();
			if(row==1)
			{
				result="added";
			}
			else
			{
				result="failed";
			}
		}
			catch (Exception e) 
		    {
				result="failed";
				System.out.println(e);
			}
			finally 
			{
				return result;
			}
	}
	
	public String addNote(String name, String note, Connection con) {
		try {
			String sql = "insert into "+name+"Data values(?,?,?)";

			PreparedStatement ps = con.prepareStatement(sql);
			
			String date=LocalDate.now().toString();
			ps.setString(1, note);
			ps.setString(2, date);
			ps.setString(3, "not updated");
			
			
			int row = ps.executeUpdate();
			if (row == 1) {
				result = "inserted";
				
				
			} else {
				result = "failed";
			}

		} catch (Exception e) {
			result = "failed";
			System.out.println(e);
		} finally {
			return result;
		}
	}

	
	public ArrayList<UserData> getNotes(String name, Connection con)
	{
		ArrayList<UserData> al = new ArrayList<UserData>();
		try
		{
			String sql = "select * from "+name+"Data";
			PreparedStatement ps = con.prepareStatement(sql);
			ResultSet rs = ps.executeQuery();
			while(rs.next())
			{
				UserData u = new UserData();
				u.setNote(rs.getString(1));
				u.setAddDate(rs.getString(2));
				u.setmDate(rs.getString(3));
				
				al.add(u);
			}
		}
		catch (Exception e) {
			System.out.println(e);
		}
		finally {
			return al;
		}
	}
	
	
	public void deleteNote(String note, String name, Connection con)
	{
		try
		{
			String sql = "delete from "+name+"Data where note=?";
			PreparedStatement ps = con.prepareStatement(sql);
			ps.setString(1, note);
			ps.executeUpdate();
		}
		catch (Exception e) {
			// TODO: handle exception
		}
	}
}
	

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
home.jsp Page 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<%@page import="java.util.ArrayList"%>
<%@page import="com.Entity.UserData"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
<script src="SerialNumberS.js"></script>
<title>Home Page</title>
</head>
<body>
<div  class="text-center" >
<h1 class="display-6" >To Do Application</h1>

<!-- <a href="addDetails.html" class="btn btn-info" style="margin:auto;">Add Details</a>  -->
<a href="addnote.jsp" class="btn btn-info" style="margin:auto;">Add Note</a>

<%
String check = (String) session.getAttribute("check");
ArrayList<UserData> al = (ArrayList<UserData>) session.getAttribute("notes");
if(check!=null)
{
%>
<h1 class="display-6 text-center">DashBoard</h1>
<h3 class="display-4">Welcome <%=check %></h3>
<a class="btn btn-danger" href="logout">logout</a>
<%@ include file="addnote.jsp" %>

<!-- read -->
<%
if(al !=null)
{
%>

<%
for(UserData note:al)
{
%>
<div class="container border w-50">
<p>
Note: <%=note.getNote() %>
</p>
<p class="pdate">
Add Date: <%=note.getAddDate() %>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Last Update: <%=note.getmDate() %>

</p>
<form action="deletenote" method="post">
<input type="hidden" name="note" value="<%=note.getNote()%>">
<input type="hidden" name="name" value="<%=check%>">
<button class="btn btn-danger btn-sm">Delete</button>
</form>
<%@ include file="updatenote.jsp" %>
</div>
<br>
<%}
}
else
{
%>
<h1 class="text-center text-danger">please Add notes</h1>
<%} %>


<%} 
%>
else
{
	response.sendRedirect("login.jsp");
}
%>
</body>
</html>


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
UpdateNote Jsp 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<%@page import="java.util.ArrayList"%>
<%@page import="com.Entity.User"%>
<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html>
<head>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">

<meta charset="ISO-8859-1">
<title>Insert title here</title>
<style type="text/css">
.popup{
display: none;
position: fixed;
z-index: 1;
left: 0px;
right: 0px;
top:100px;
width: 100%;
height: 100%;
}

.popup-content{
margin: 20px auto;
width: 50%;
background-color: #EAECEE ;
}

.close{
float: right;
font-size: 35px;
}
</style>

</head>
<body>


<%
String check2=(String)session.getAttribute("check");
ArrayList<User> al=(ArrayList<User>) session.getAttribute("notes");
if(check2!=null)
{
	
	
	
%>

<button class="btn btn-info btn-sm" onclick="openform1()">Update</button>


<div class="popup" id="popupform1">
<div class="popup-content">

<h1 class="display-6 text-center">Update Note</h1>
<span class="close text-white btn btn-outline-danger" onclick="closeform1()">&times;</span>

<form action="updatenote" method="post">
<input type="hidden" name="uname" value="<%=check2%>">
<label class="form-label">Write Note</label>
<textarea rows="10" cols="30" name="note" class="form-control"></textarea>

<button class="btn btn-info">Submit</button>
</form>

</div>
</div>

<%} 
else
{
	response.sendRedirect("login.html");
}
%>

<script type="text/javascript">

function openform1()
{
	document.getElementById("popupform1").style.display="Block";
}
function closeform1()
{
	document.getElementById("popupform1").style.display="none";
}
</script>
</body>
</html>

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>



